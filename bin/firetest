#!/usr/bin/env node

const supercmd = require('supercmd')
const FireTest = require('../src/FireTest').FireTest
const colorfy = require('colorfy')

supercmd
  .cmd('* [files]')
  .description('Run all tests')
  .option('-b, --bail', 'Cancel tests on first error')
  .option('-g, --grep <str>', 'Grep for tests')
  .option('-f, --fgrep <str>', 'Grep for tests by filename')
  .action((ctx, files) => {
    const fireTest = new FireTest({
      bail: ctx.bail,
      grep: ctx.grep,
      fgrep: ctx.fgrep,
      files: files
    })

    const cf = colorfy()

    fireTest.on('runner:start', () => {
      cf.lime('Start firetest runner').print()
    })

    fireTest.on('runner:init', () => {
      cf.azure(fireTest.files.length).grey(' files loaded').print()
    })

    fireTest.on('runner:success', () => {
      cf.green('Done').print()
    })

    fireTest.on('runner:fail', () => {
      cf.red('Failed').print()
      process.exit(1)
    })

    return fireTest.run().then(() => {

    }).catch((err) => {
      cf.red('Failed with error:').grey(err.message).print()
      if (flags.stack) {
        cf.ddgrey(err.stack).print()
      }

      process.exit(1)
    })
  })

// const args = process.argv.splice(2)
// args.unshift('test')
supercmd.parse(process.argv)

process.on('unhandledRejection', (err) => {
  console.log(err)
  process.exit(1)
});

process.on('uncaughtException', (err) => {
  console.log(err)
  process.exit(1)
});
